plot(Z3.saved ~ nut.values)
plot(N.saved ~ nut.values)
library(deSolve)
model = function(t, y, parms) {
with(as.list(c(y,parms)),{
dP1 = P1*(mumax1*N/(K1 + N)) - D*P1 - g1*Z1*P1/(H1 + P1)
dP2 = P2*(mumax2*N/(K2 + N)) - D*P2 - g2*Z2*P2/(H2 + P2)
dP3 = P3*(mumax3*N/(K3 + N)) - D*P3 - g3*Z3*P3/(H3 + P3)
dN = D*(Nin - N) - Q1*P1*(mumax1*N/(K1 + N)) - Q2*P2*(mumax2*N/(K2 + N)) - Q3*P3*(mumax3*N/(K3 + N)) + Q1*r*(1-e)*g1*Z1*P1/(H1 + P1) +  Q2*r*(1-e)*g2*Z2*P2/(H2 + P2) +  Q3*r*(1-e)*g3*Z3*P3/(H3 + P3)
dZ1 = c*e*g1*Z1*P1/(H1 + P1) - m1*Z1 - mq*Z1^2
dZ2 = c*e*g2*Z2*P2/(H2 + P2) - m2*Z2 - mq*Z2^2
dZ3 = c*e*g3*Z3*P3/(H3 + P3) - m3*Z3 - mq*Z3^2
#3 phyto species of dif size class, 3 zoop species of dif size class
#each phtyo size class eaten by dif zoop size class
#Z's have a loss rate prop to abundance ^2; stabilize system and puts cap on pop
list(c(dP1, dP2, dP3, dZ1, dZ2, dZ3, dN))
})
}
D = 0.02
Nin = 25
#P1 parameters
mumax1 = 0.8
size1 = 0.6
affinity1 = 500
K1 = mumax1/affinity1
Q1 = 7.9e-10
#P2 parameters- note size scaling affinity
mumax2 = 1.2
size2 = 2
affinity2 = affinity1*((size2/size1)^3)^(-0.5)
K2 = mumax2/affinity2
Q2 = ((size2/size1)^3)*Q1
#P3 parameters- note size scaling affinity
mumax3 = 1
size3 = 5
affinity3 = affinity1*((size3/size1)^3)^(-0.5)
K3 = mumax3/affinity3
Q3 = ((size2/size1)^3)*Q1
#gross growth efficiency
e = 0.25
#conversion factor (zooplankton:phytoplankton cell volume ratio)
c = 0.01
#fraction of leftover nutrient remineralized to dissolved form
r = 0.8
#Z1 parameters
g1 = 1200
H1 = 6*10^9
m1 = 0.1
#Z2 parameters
g2 = g1*((size2/size1)^3)^(-0.1)
H2 = H1
m2 = 0.1*((size2/size1)^3)^(-0.1)
#Z3 parameters
g3 = g1*((size3/size1)^3)^(-0.1)
H3 = H1
m3 = 0.1*((size3/size1)^3)^(-0.1)
#closure parameter
mq = 6e-9
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
inits = c(1e6, 1e6, 1e6, 1e4, 1e4, 1e2, 1e-3)
names(inits) = c('P1', 'P2', 'P3', 'Z1', 'Z2', 'Z3','N')
times = seq(0,6000,length = 1000)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1 = out[nrow(out),"P1"]
P2 = out[nrow(out),"P2"]
P3 = out[nrow(out),"P3"]
Z1 = out[nrow(out),"Z1"]
Z2 = out[nrow(out),"Z2"]
Z3 = out[nrow(out),"Z3"]
N = out[nrow(out),"N"]
#loop to change just a little bit and re run
#for (i in [set of values want to take on]); if want to loop nut.values
#nut.values= c(1,2,3,4)
#P1.saved=vector()
#P2.saved=vector()
#P3.saved=vector()
#Z1.saved=vector()
#Z2.saved=vector()
#Z3.saved=vector()
#N.saved=vector()
#for (i in 1:length(nut.values)) {
#Nin=nut.values[i]
#parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
#out = ode(inits, times, model, parms)
#plot(out, las = 1, log = 'y')
#P1.saved[i] = out[nrow(out),"P1"]
#P2.saved[i] = out[nrow(out),"P2"]
#P3.saved[i] = out[nrow(out),"P3"]
#Z1.saved[i] = out[nrow(out),"Z1"]
#Z2.saved[i] = out[nrow(out),"Z2"]
#Z3.saved[i] = out[nrow(out),"Z3"]
#N.saved[i] = out[nrow(out),"N"]
#}
#plot(P1.saved ~ nut.values)
#plot(P2.saved ~ nut.values)
#plot(P3.saved ~ nut.values)
#plot(Z1.saved ~ nut.values)
#plot(Z2.saved ~ nut.values)
#plot(Z3.saved ~ nut.values)
#plot(N.saved ~ nut.values)
nut.values= c(15, 25)
P1.saved=vector()
P2.saved=vector()
P3.saved=vector()
Z1.saved=vector()
Z2.saved=vector()
Z3.saved=vector()
N.saved=vector()
for (i in 1:length(nut.values)) {
Nin=nut.values[i]
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1.saved[i] = out[nrow(out),"P1"]
P2.saved[i] = out[nrow(out),"P2"]
P3.saved[i] = out[nrow(out),"P3"]
Z1.saved[i] = out[nrow(out),"Z1"]
Z2.saved[i] = out[nrow(out),"Z2"]
Z3.saved[i] = out[nrow(out),"Z3"]
N.saved[i] = out[nrow(out),"N"]
}
plot(P1.saved ~ nut.values)
plot(P2.saved ~ nut.values)
plot(P3.saved ~ nut.values)
plot(Z1.saved ~ nut.values)
plot(Z2.saved ~ nut.values)
plot(Z3.saved ~ nut.values)
plot(N.saved ~ nut.values)
library(deSolve)
model = function(t, y, parms) {
with(as.list(c(y,parms)),{
dP1 = P1*(mumax1*N/(K1 + N)) - D*P1 - g1*Z1*P1/(H1 + P1)
dP2 = P2*(mumax2*N/(K2 + N)) - D*P2 - g2*Z2*P2/(H2 + P2)
dP3 = P3*(mumax3*N/(K3 + N)) - D*P3 - g3*Z3*P3/(H3 + P3)
dN = D*(Nin - N) - Q1*P1*(mumax1*N/(K1 + N)) - Q2*P2*(mumax2*N/(K2 + N)) - Q3*P3*(mumax3*N/(K3 + N)) + Q1*r*(1-e)*g1*Z1*P1/(H1 + P1) +  Q2*r*(1-e)*g2*Z2*P2/(H2 + P2) +  Q3*r*(1-e)*g3*Z3*P3/(H3 + P3)
dZ1 = c*e*g1*Z1*P1/(H1 + P1) - m1*Z1 - mq*Z1^2
dZ2 = c*e*g2*Z2*P2/(H2 + P2) - m2*Z2 - mq*Z2^2
dZ3 = c*e*g3*Z3*P3/(H3 + P3) - m3*Z3 - mq*Z3^2
#3 phyto species of dif size class, 3 zoop species of dif size class
#each phtyo size class eaten by dif zoop size class
#Z's have a loss rate prop to abundance ^2; stabilize system and puts cap on pop
list(c(dP1, dP2, dP3, dZ1, dZ2, dZ3, dN))
})
}
D = 0.02
Nin = 25
#P1 parameters
mumax1 = 0.8
size1 = 0.6
affinity1 = 500
K1 = mumax1/affinity1
Q1 = 7.9e-10
#P2 parameters- note size scaling affinity
mumax2 = 1.2
size2 = 2
affinity2 = affinity1*((size2/size1)^3)^(-0.5)
K2 = mumax2/affinity2
Q2 = ((size2/size1)^3)*Q1
#P3 parameters- note size scaling affinity
mumax3 = 1
size3 = 5
affinity3 = affinity1*((size3/size1)^3)^(-0.5)
K3 = mumax3/affinity3
Q3 = ((size2/size1)^3)*Q1
#gross growth efficiency
e = 0.25
#conversion factor (zooplankton:phytoplankton cell volume ratio)
c = 0.01
#fraction of leftover nutrient remineralized to dissolved form
r = 0.8
#Z1 parameters
g1 = 1200
H1 = 6*10^9
m1 = 0.1
#Z2 parameters
g2 = g1*((size2/size1)^3)^(-0.1)
H2 = H1
m2 = 0.1*((size2/size1)^3)^(-0.1)
#Z3 parameters
g3 = g1*((size3/size1)^3)^(-0.1)
H3 = H1
m3 = 0.1*((size3/size1)^3)^(-0.1)
#closure parameter
mq = 6e-9
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
inits = c(1e6, 1e6, 1e6, 1e4, 1e4, 1e2, 1e-3)
names(inits) = c('P1', 'P2', 'P3', 'Z1', 'Z2', 'Z3','N')
times = seq(0,6000,length = 1000)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1 = out[nrow(out),"P1"]
P2 = out[nrow(out),"P2"]
P3 = out[nrow(out),"P3"]
Z1 = out[nrow(out),"Z1"]
Z2 = out[nrow(out),"Z2"]
Z3 = out[nrow(out),"Z3"]
N = out[nrow(out),"N"]
#loop to change just a little bit and re run
#for (i in [set of values want to take on]); if want to loop nut.values
#nut.values= c(1,2,3,4)
#P1.saved=vector()
#P2.saved=vector()
#P3.saved=vector()
#Z1.saved=vector()
#Z2.saved=vector()
#Z3.saved=vector()
#N.saved=vector()
#for (i in 1:length(nut.values)) {
#Nin=nut.values[i]
#parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
#out = ode(inits, times, model, parms)
#plot(out, las = 1, log = 'y')
#P1.saved[i] = out[nrow(out),"P1"]
#P2.saved[i] = out[nrow(out),"P2"]
#P3.saved[i] = out[nrow(out),"P3"]
#Z1.saved[i] = out[nrow(out),"Z1"]
#Z2.saved[i] = out[nrow(out),"Z2"]
#Z3.saved[i] = out[nrow(out),"Z3"]
#N.saved[i] = out[nrow(out),"N"]
#}
#plot(P1.saved ~ nut.values)
#plot(P2.saved ~ nut.values)
#plot(P3.saved ~ nut.values)
#plot(Z1.saved ~ nut.values)
#plot(Z2.saved ~ nut.values)
#plot(Z3.saved ~ nut.values)
#plot(N.saved ~ nut.values)
nut.values= c(0.05, 0.2, 1, 5, 10, 15, 25)
P1.saved=vector()
P2.saved=vector()
P3.saved=vector()
Z1.saved=vector()
Z2.saved=vector()
Z3.saved=vector()
N.saved=vector()
for (i in 1:length(nut.values)) {
Nin=nut.values[i]
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1.saved[i] = out[nrow(out),"P1"]
P2.saved[i] = out[nrow(out),"P2"]
P3.saved[i] = out[nrow(out),"P3"]
Z1.saved[i] = out[nrow(out),"Z1"]
Z2.saved[i] = out[nrow(out),"Z2"]
Z3.saved[i] = out[nrow(out),"Z3"]
N.saved[i] = out[nrow(out),"N"]
}
plot(P1.saved ~ nut.values)
plot(P2.saved ~ nut.values)
plot(P3.saved ~ nut.values)
plot(Z1.saved ~ nut.values)
plot(Z2.saved ~ nut.values)
plot(Z3.saved ~ nut.values)
plot(N.saved ~ nut.values)
library(deSolve)
model = function(t, y, parms) {
with(as.list(c(y,parms)),{
dP1 = P1*(mumax1*N/(K1 + N)) - D*P1 - g1*Z1*P1/(H1 + P1)
dP2 = P2*(mumax2*N/(K2 + N)) - D*P2 - g2*Z2*P2/(H2 + P2)
dP3 = P3*(mumax3*N/(K3 + N)) - D*P3 - g3*Z3*P3/(H3 + P3)
dN = D*(Nin - N) - Q1*P1*(mumax1*N/(K1 + N)) - Q2*P2*(mumax2*N/(K2 + N)) - Q3*P3*(mumax3*N/(K3 + N)) + Q1*r*(1-e)*g1*Z1*P1/(H1 + P1) +  Q2*r*(1-e)*g2*Z2*P2/(H2 + P2) +  Q3*r*(1-e)*g3*Z3*P3/(H3 + P3)
dZ1 = c*e*g1*Z1*P1/(H1 + P1) - m1*Z1 - mq*Z1^2
dZ2 = c*e*g2*Z2*P2/(H2 + P2) - m2*Z2 - mq*Z2^2
dZ3 = c*e*g3*Z3*P3/(H3 + P3) - m3*Z3 - mq*Z3^2
#3 phyto species of dif size class, 3 zoop species of dif size class
#each phtyo size class eaten by dif zoop size class
#Z's have a loss rate prop to abundance ^2; stabilize system and puts cap on pop
list(c(dP1, dP2, dP3, dZ1, dZ2, dZ3, dN))
})
}
D = 0.02
Nin = 25
#P1 parameters
mumax1 = 0.8
size1 = 0.6
affinity1 = 500
K1 = mumax1/affinity1
Q1 = 7.9e-10
#P2 parameters- note size scaling affinity
mumax2 = 1.2
size2 = 2
affinity2 = affinity1*((size2/size1)^3)^(-0.5)
K2 = mumax2/affinity2
Q2 = ((size2/size1)^3)*Q1
#P3 parameters- note size scaling affinity
mumax3 = 1
size3 = 5
affinity3 = affinity1*((size3/size1)^3)^(-0.5)
K3 = mumax3/affinity3
Q3 = ((size2/size1)^3)*Q1
#gross growth efficiency
e = 0.25
#conversion factor (zooplankton:phytoplankton cell volume ratio)
c = 0.01
#fraction of leftover nutrient remineralized to dissolved form
r = 0.8
#Z1 parameters
g1 = 1200
H1 = 6*10^9
m1 = 0.1
#Z2 parameters
g2 = g1*((size2/size1)^3)^(-0.1)
H2 = H1
m2 = 0.1*((size2/size1)^3)^(-0.1)
#Z3 parameters
g3 = g1*((size3/size1)^3)^(-0.1)
H3 = H1
m3 = 0.1*((size3/size1)^3)^(-0.1)
#closure parameter
mq = 6e-9
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
inits = c(1e6, 1e6, 1e6, 1e4, 1e4, 1e2, 1e-3)
names(inits) = c('P1', 'P2', 'P3', 'Z1', 'Z2', 'Z3','N')
times = seq(0,6000,length = 1000)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1 = out[nrow(out),"P1"]
P2 = out[nrow(out),"P2"]
P3 = out[nrow(out),"P3"]
Z1 = out[nrow(out),"Z1"]
Z2 = out[nrow(out),"Z2"]
Z3 = out[nrow(out),"Z3"]
N = out[nrow(out),"N"]
#loop to change just a little bit and re run
#for (i in [set of values want to take on]); if want to loop nut.values
#nut.values= c(1,2,3,4)
#P1.saved=vector()
#P2.saved=vector()
#P3.saved=vector()
#Z1.saved=vector()
#Z2.saved=vector()
#Z3.saved=vector()
#N.saved=vector()
#for (i in 1:length(nut.values)) {
#Nin=nut.values[i]
#parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
#out = ode(inits, times, model, parms)
#plot(out, las = 1, log = 'y')
#P1.saved[i] = out[nrow(out),"P1"]
#P2.saved[i] = out[nrow(out),"P2"]
#P3.saved[i] = out[nrow(out),"P3"]
#Z1.saved[i] = out[nrow(out),"Z1"]
#Z2.saved[i] = out[nrow(out),"Z2"]
#Z3.saved[i] = out[nrow(out),"Z3"]
#N.saved[i] = out[nrow(out),"N"]
#}
#plot(P1.saved ~ nut.values)
#plot(P2.saved ~ nut.values)
#plot(P3.saved ~ nut.values)
#plot(Z1.saved ~ nut.values)
#plot(Z2.saved ~ nut.values)
#plot(Z3.saved ~ nut.values)
#plot(N.saved ~ nut.values)
nut.values= c(0.05, 0.2, 1, 5, 10, 15, 25)
P1.saved=vector()
P2.saved=vector()
P3.saved=vector()
Z1.saved=vector()
Z2.saved=vector()
Z3.saved=vector()
N.saved=vector()
for (i in 1:length(nut.values)) {
Nin=nut.values[i]
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1.saved[i] = out[nrow(out),"P1"]
P2.saved[i] = out[nrow(out),"P2"]
P3.saved[i] = out[nrow(out),"P3"]
Z1.saved[i] = out[nrow(out),"Z1"]
Z2.saved[i] = out[nrow(out),"Z2"]
Z3.saved[i] = out[nrow(out),"Z3"]
N.saved[i] = out[nrow(out),"N"]
}
plot(P1.saved ~ nut.values)
plot(P2.saved ~ nut.values)
plot(P3.saved ~ nut.values)
plot(Z1.saved ~ nut.values)
plot(Z2.saved ~ nut.values)
plot(Z3.saved ~ nut.values)
plot(N.saved ~ nut.values)
Z1.saved
library(deSolve)
model = function(t, y, parms) {
with(as.list(c(y,parms)),{
dP1 = P1*(mumax1*N/(K1 + N)) - D*P1 - g1*Z1*P1/(H1 + P1)
dP2 = P2*(mumax2*N/(K2 + N)) - D*P2 - g2*Z2*P2/(H2 + P2)
dP3 = P3*(mumax3*N/(K3 + N)) - D*P3 - g3*Z3*P3/(H3 + P3)
dN = D*(Nin - N) - Q1*P1*(mumax1*N/(K1 + N)) - Q2*P2*(mumax2*N/(K2 + N)) - Q3*P3*(mumax3*N/(K3 + N)) + Q1*r*(1-e)*g1*Z1*P1/(H1 + P1) +  Q2*r*(1-e)*g2*Z2*P2/(H2 + P2) +  Q3*r*(1-e)*g3*Z3*P3/(H3 + P3)
dZ1 = c*e*g1*Z1*P1/(H1 + P1) - m1*Z1 - mq*Z1^2
dZ2 = c*e*g2*Z2*P2/(H2 + P2) - m2*Z2 - mq*Z2^2
dZ3 = c*e*g3*Z3*P3/(H3 + P3) - m3*Z3 - mq*Z3^2
#3 phyto species of dif size class, 3 zoop species of dif size class
#each phtyo size class eaten by dif zoop size class
#Z's have a loss rate prop to abundance ^2; stabilize system and puts cap on pop
list(c(dP1, dP2, dP3, dZ1, dZ2, dZ3, dN))
})
}
D = 0.02
Nin = 25
#P1 parameters
mumax1 = 0.8
size1 = 0.6
affinity1 = 500
K1 = mumax1/affinity1
Q1 = 7.9e-10
#P2 parameters- note size scaling affinity
mumax2 = 1.2
size2 = 2
affinity2 = affinity1*((size2/size1)^3)^(-0.5)
K2 = mumax2/affinity2
Q2 = ((size2/size1)^3)*Q1
#P3 parameters- note size scaling affinity
mumax3 = 1
size3 = 5
affinity3 = affinity1*((size3/size1)^3)^(-0.5)
K3 = mumax3/affinity3
Q3 = ((size2/size1)^3)*Q1
#gross growth efficiency
e = 0.25
#conversion factor (zooplankton:phytoplankton cell volume ratio)
c = 0.01
#fraction of leftover nutrient remineralized to dissolved form
r = 0.8
#Z1 parameters
g1 = 1200
H1 = 6*10^9
m1 = 0.1
#Z2 parameters
g2 = g1*((size2/size1)^3)^(-0.1)
H2 = H1
m2 = 0.1*((size2/size1)^3)^(-0.1)
#Z3 parameters
g3 = g1*((size3/size1)^3)^(-0.1)
H3 = H1
m3 = 0.1*((size3/size1)^3)^(-0.1)
#closure parameter
mq = 6e-9
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
inits = c(1e6, 1e6, 1e6, 1e4, 1e4, 1e2, 1e-3)
names(inits) = c('P1', 'P2', 'P3', 'Z1', 'Z2', 'Z3','N')
times = seq(0,6000,length = 1000)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1 = out[nrow(out),"P1"]
P2 = out[nrow(out),"P2"]
P3 = out[nrow(out),"P3"]
Z1 = out[nrow(out),"Z1"]
Z2 = out[nrow(out),"Z2"]
Z3 = out[nrow(out),"Z3"]
N = out[nrow(out),"N"]
#loop to change just a little bit and re run
#for (i in [set of values want to take on]); if want to loop nut.values
#nut.values= c(1,2,3,4)
#P1.saved=vector()
#P2.saved=vector()
#P3.saved=vector()
#Z1.saved=vector()
#Z2.saved=vector()
#Z3.saved=vector()
#N.saved=vector()
#for (i in 1:length(nut.values)) {
#Nin=nut.values[i]
#parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
#out = ode(inits, times, model, parms)
#plot(out, las = 1, log = 'y')
#P1.saved[i] = out[nrow(out),"P1"]
#P2.saved[i] = out[nrow(out),"P2"]
#P3.saved[i] = out[nrow(out),"P3"]
#Z1.saved[i] = out[nrow(out),"Z1"]
#Z2.saved[i] = out[nrow(out),"Z2"]
#Z3.saved[i] = out[nrow(out),"Z3"]
#N.saved[i] = out[nrow(out),"N"]
#}
#plot(P1.saved ~ nut.values)
#plot(P2.saved ~ nut.values)
#plot(P3.saved ~ nut.values)
#plot(Z1.saved ~ nut.values)
#plot(Z2.saved ~ nut.values)
#plot(Z3.saved ~ nut.values)
#plot(N.saved ~ nut.values)
nut.values= c(15, 25)
P1.saved=vector()
P2.saved=vector()
P3.saved=vector()
Z1.saved=vector()
Z2.saved=vector()
Z3.saved=vector()
N.saved=vector()
for (i in 1:length(nut.values)) {
Nin=nut.values[i]
parms = list(D = D, Nin = Nin, mumax1 = mumax1, K1 = K1, Q1 = Q1, mumax2 = mumax2, K2 = K2, Q2 = Q2, c = c, e = e, r = r, g1 = g1, H1 = H1, g2 = g2, H2 = H2, m1 = m1, m2 = m2, mumax3 = mumax3, K3 = K3, Q3 = Q3, g3 = g3, H3 = H3, m3 = m3, mq = mq)
out = ode(inits, times, model, parms)
plot(out, las = 1, log = 'y')
P1.saved[i] = out[nrow(out),"P1"]
P2.saved[i] = out[nrow(out),"P2"]
P3.saved[i] = out[nrow(out),"P3"]
Z1.saved[i] = out[nrow(out),"Z1"]
Z2.saved[i] = out[nrow(out),"Z2"]
Z3.saved[i] = out[nrow(out),"Z3"]
N.saved[i] = out[nrow(out),"N"]
}
plot(P1.saved ~ nut.values)
plot(P2.saved ~ nut.values)
plot(P3.saved ~ nut.values)
plot(Z1.saved ~ nut.values)
plot(Z2.saved ~ nut.values)
plot(Z3.saved ~ nut.values)
plot(N.saved ~ nut.values)
setwd("~/Desktop/fishRprice")
